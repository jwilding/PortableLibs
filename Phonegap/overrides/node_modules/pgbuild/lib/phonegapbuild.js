/****************************************************************************
**
** copyright (c) 2012 girish ramakrishnan <girish@forwardbias.in>
**
** use, modification and distribution is allowed without limitation,
** warranty, liability or support of any kind.
**
****************************************************************************/

var http = require("http"),
    https = require('https'),
    fs = require('fs'),
    url = require('url'),
    path = require('path'),
    util = require('util');

module.exports = PhoneGapBuild;
module.exports.HttpError = HttpError;

function PhoneGapBuild(buildHost, buildPort) {
    this.buildHost = buildHost || "build.phonegap.com";
    this.buildPort = buildPort || 443;
    this.httpAuth = "";
    this.verbose = false;
}

PhoneGapBuild.prototype.debug = function(msg) {
    if (this.verbose) {
        console.log(msg);
    }
}

function parseEncoding(contentType) {
    var pat = /charset=([^;\s]*)/;
    var result = pat.exec(contentType);
    return result ? result[1] : "utf8";
}

PhoneGapBuild.prototype.setCredentials = function(username, password) {
    this.httpAuth = "Basic " + new Buffer(username + ":" + password).toString("base64");
}

PhoneGapBuild.prototype.setVerbose = function(v) {
    this.verbose = v;
}

// http://dustinsenos.com/articles/customErrorsInNode
// http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
function HttpError(statusCode, jsonError) {
    Error.call(this);
    Error.captureStackTrace(this, this.constructor);

    this.name = this.constructor.name;
    this.message = http.STATUS_CODES[statusCode];
    this.statusCode = statusCode;
    this.jsonError = jsonError && jsonError.error ? jsonError.error : "";
}
util.inherits(HttpError, Error);

PhoneGapBuild.prototype.request = function(method, path, headers, next) {
    var that = this;

    if (typeof headers === 'function') {
        next = headers;
        headers = { };
    } else {
        next = next || function() { }
    }

    var options = {
        host: this.buildHost,
        port: this.buildPort,
        path: path,
        method: method,
        headers: headers
    };

    options.headers["authorization"] = this.httpAuth;

    var req = https.request(options, function(res) {
        var data = "";

        that.debug("statusCode: " + res.statusCode);
        that.debug("headers: " + res.headers);

        res.setEncoding(parseEncoding(res.headers['content-type']));
        res.on('data', function(d) { data += d; });
        res.on('end', function() { that.debug(data); next(null, res.statusCode, data); });
        res.on('close', function() { next(new Error('connection prematurely closed')); });
    });

    req.on('error', function(e) { next(e); });
    if (method !== "POST" && method !== "PUT")
        req.end();
    return req;
}

function parseJson(data) {
    try {
        return JSON.parse(data);
    } catch (e) {
        return null;
    }
}

PhoneGapBuild.prototype.list = function(next) {
    next = next || function() { };

    this.request("GET", "/api/v1/apps", function(error, statusCode, data) {
        if (error) return next(error);

        var result = JSON.parse(data);

        if (statusCode != 200) return next(new HttpError(statusCode, result));
        if (!result) return next(new Error("Failed to parse JSON response"));

        next(null, result.apps || []);
    });
}

PhoneGapBuild.prototype.show = function(appid, next) {
    next = next || function() { };

    this.request("GET", "/api/v1/apps/" + appid, function(error, statusCode, data) {
        if (error) return next(error);

        var result = JSON.parse(data);

        if (statusCode != 200) return next(new HttpError(statusCode, result));
        if (!result) next(new Error("Failed to parse JSON"));

        next(null, result);
    });
}

PhoneGapBuild.prototype.downloadFile = function(link, destdir, next) {
    var fileName = link.substr(link.lastIndexOf('/')+1);
    var absoluteFilePath = destdir + '/' + fileName;
    var of = fs.createWriteStream(absoluteFilePath);
    var u = url.parse(link);
    var scheme = null;
    next = next || function() { };

    if (u.protocol == "https:") {
        scheme = https;
    } else if (u.protocol == "http:") {
        scheme = http;
    } else {
        return next(new Error("Unsupported url " + link));
    }
    var options = {
        host: u.host,
        port: u.port,
        path: u.path
    };
    scheme.get(options, function(res) {
        res.pipe(of);
        process.stdout.write("Downloading to " + absoluteFilePath + "\n");
        res.on('data', function(d) { process.stdout.write("."); });
        res.on('end', function() { of.end(); process.stdout.write("\n"); next(null); });
        res.on('close', function() { next(new Error('connection prematurely closed')); });
    }).on('error', function(e) { next(e); });
}

PhoneGapBuild.prototype.download = function(appid, platform, next) {
    var that = this;

    this.request("GET", "/api/v1/apps/" + appid + "/" + platform, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);

        if (statusCode != 302) return next(new HttpError(statusCode, result));
        if (!result.location) return next(new Error("Failed to parse JSON"));

        that.downloadFile(result.location, process.cwd(), next);
    });
}

PhoneGapBuild.prototype.remove = function(appid, next) {
    next = next || function() { };

    this.request("DELETE", "/api/v1/apps/" + appid, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);

        if (statusCode != 202) return next(new HttpError(statusCode, result));

        next(null);
    });
}

function isFile(file) {
    try {
        return fs.statSync(file).isFile();
    } catch(e) {
        return false;
    }
}

function createMultipartBody(boundary, parts) {
    var crlf = "\r\n", part, data, name;
    var multipartBody = new Buffer(0);

    for (var i = 0; i < parts.length; i++) {
        part = parts[i];
        multipartBody = Buffer.concat([multipartBody, Buffer("--" + boundary + crlf)]);

        if (part.file) {
            name = part.name || "file";
            multipartBody = Buffer.concat([
                multipartBody,
                Buffer("Content-Disposition: form-data; name=\"" + name + "\"; filename=\"" + path.basename(part.file) + "\"" + crlf),
                Buffer("Content-Type: application/octet-stream" + crlf + crlf),
                fs.readFileSync(part.file)]);
        } else if (part.json) {
            data = JSON.stringify(part.json);
            multipartBody = Buffer.concat([
                multipartBody,
                Buffer("Content-Disposition: form-data; name=\"data\"" + crlf + crlf),
                Buffer(data)]);
        }
        multipartBody = Buffer.concat([multipartBody, Buffer(crlf)]);
    }

    multipartBody = Buffer.concat([multipartBody, Buffer("--" + boundary + "--" + crlf)]);
    return multipartBody;
}

PhoneGapBuild.prototype.create = function(options, next) {
    var repo = options.repo || "";
    var isGitRepo = (repo.substr(0, 6) == "git://") || (repo.substr(-4) == ".git");
    var boundary = "-------------------akupudiching" + Math.random();
    var multipartBody = null;
    var headers = { };

    var postData = {
        title: path.basename(repo, path.extname(repo)),
        create_method: isGitRepo ?  "remote_repo" : "file",
        private: options.private || false,
        debug: false,
        repo: isGitRepo ? repo : null
    };

    next = next || function() { }

    if (!isGitRepo) {
        if (!isFile(repo)) return next(new Error(repo + " is not a file or git repository"));

        multipartBody = createMultipartBody(boundary, [{file: repo}, {json: postData}]);

        headers["content-type"] = 'multipart/form-data; boundary=' + boundary;
        headers["content-length"] = multipartBody.length;
    }

    var req = this.request("POST", "/api/v1/apps", headers, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);

        if (statusCode != 201) return next(new HttpError(statusCode, result));

        next(null, result);
    });

    if (!isGitRepo) {
        req.write(multipartBody);
    } else {
        req.write("data=" + JSON.stringify(postData));
    }
    req.end();
}

PhoneGapBuild.prototype.updateWithLocalFile = function(appid, file, next) {
    var headers = { }, data, multipartBody;
    var boundary = "-------------------akupudiching" + Math.random();

    if (!isFile(file)) return next(new Error(file + " is not a file"));

    next = next || function() { };

    multipartBody = createMultipartBody(boundary, [{file:file}]);
    headers["content-type"] = 'multipart/form-data; boundary=' + boundary;
    headers["content-length"] = multipartBody.length;

    var req = this.request("PUT", "/api/v1/apps/" + appid, headers, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);
        if (statusCode != 200) return next(new HttpError(statusCode, result));

        next(null);
    });

    req.write(multipartBody);
    req.end();
}

PhoneGapBuild.prototype.update = function(appid, file, next) {
    var headers = { }, data;
    var gitRepoPutData = { pull: "true" }; // sic

    if (file !== '') {
        return this.updateWithLocalFile(appid, file, next);
    }

    headers["content-type"] = "application/x-www-form-urlencoded"; // doesn't work with anything else
    data = "data=" + JSON.stringify(gitRepoPutData);
    headers["content-length"] = data.length;

    var req = this.request("PUT", "/api/v1/apps/" + appid, headers, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);
        if (statusCode != 200) return next(new HttpError(statusCode, result));

        next(null);
    });

    req.write(data);
    req.end();
}

PhoneGapBuild.prototype.rebuild = function(appid, platforms, next) {
    next = next || function() { }
    var headers = { };
    var postData = { platforms: platforms };
    var data = ""

    if (platforms.length != 0) {
        data = "data=" + JSON.stringify(postData);
    }

    headers["content-type"] = "application/x-www-form-urlencoded"; // doesn't work with anything else
    headers["content-length"] = data.length;

    var req = this.request("POST", "/api/v1/apps/" + appid + "/build", headers, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);

        if (statusCode != 202) return next(new HttpError(statusCode, result));

        next(null, result);
    });

    req.write(data);
    req.end();
}

PhoneGapBuild.prototype.createKey = function(options, next) {
    var boundary = "-------------------akupudiching" + Math.random();
    var multipartBody = null, headers = { }
    var postData;

    if (options.platform == "android") {
        postData = {
            title: options.title,
            keystore_pw: options.keystore_pw,
            alias: options.alias, 
            key_pw: options.key_pw
        }
    } else if (options.platform == "ios") {
        postData = {
            title: options.title,
            password: options.certificate_pw
        }
    }
   
    next = next || function() { }

    if (options.platform == "android") {
        multipartBody = createMultipartBody(boundary, [{file: options.keystoreFile, name: "keystore"}, {json:postData}]);
    } else {
        multipartBody = createMultipartBody(boundary, [
            { file: options.certificateFile, name: "cert" },
            { file: options.mobileProvisionFile, name: "profile" },
            { json: postData }
        ]);
    }

    headers["content-type"] = 'multipart/form-data; boundary=' + boundary;
    headers["content-length"] = multipartBody.length;

    var req = this.request("POST", "/api/v1/keys/" + options.platform, headers, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);

        if (statusCode != 201) return next(new HttpError(statusCode, result));

        next(null, result);
    });

    req.write(multipartBody);
    req.end();
}

PhoneGapBuild.prototype.listKeys = function(next) {
    next = next || function() { };

    this.request("GET", "/api/v1/keys", function(error, statusCode, data) {
        if (error) return next(error);

        var result = JSON.parse(data);

        if (statusCode != 200) return next(new HttpError(statusCode, result));
        if (!result) return next(new Error("Failed to parse JSON response"));

        next(null, result.keys || []);
    });
}

PhoneGapBuild.prototype.deleteKey = function(platform, keyid, next) {
    next = next || function() { };

    this.request("DELETE", "/api/v1/keys/" + platform + "/" + keyid, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);

        if (statusCode != 202) return next(new HttpError(statusCode, result));

        next(null);
    });
}

PhoneGapBuild.prototype.setKey = function(appid, platform, keyid, next) {
    next = next || function() { }
    var headers = { };
    var putData = { keys: { } };

    putData.keys[platform] = parseInt(keyid);

    var data = "data=" + JSON.stringify(putData);

    headers["content-type"] = "application/x-www-form-urlencoded"; // doesn't work with anything else
    headers["content-length"] = data.length;

    var req = this.request("PUT", "/api/v1/apps/" + appid, headers, function(error, statusCode, data) {
        if (error) return next(error);

        var result = parseJson(data);

        if (statusCode != 200) return next(new HttpError(statusCode, result));

        next(null, result);
    });

    req.write(data);
    req.end();
}

